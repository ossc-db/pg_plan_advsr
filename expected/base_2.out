LOAD 'pg_hint_plan';
LOAD 'pg_plan_advsr';
LOAD 'pg_store_plans';
-- Clean-up
truncate hint_plan.hints;
truncate plan_repo.norm_queries;
truncate plan_repo.raw_queries;
truncate plan_repo.plan_history;
select pg_store_plans_reset();
 pg_store_plans_reset 
----------------------
 
(1 row)

-- Enable auto-tuning
set max_parallel_workers to 0;
set max_parallel_workers_per_gather to 0;
set random_page_cost = 2;
set pg_plan_advsr.quieted to on;
select pg_plan_advsr_enable_feedback();
 pg_plan_advsr_enable_feedback 
-------------------------------
 
(1 row)

-- Execute the query 4 times
\o results/auto-tuning.tmpout
explain analyze 
select * 
from (select a.c1, a.c2 from table_a a, table_b b where a.c1 = b.c1 and a.c2 = b.c2) t1
join (select c.c1, c.c2 from table_c c where c.c1 > 1 and c.c2 >= 10) t2
on t1.c1 = t2.c1 and t1.c2 = t2.c2;
explain analyze 
select * 
from (select a.c1, a.c2 from table_a a, table_b b where a.c1 = b.c1 and a.c2 = b.c2) t1
join (select c.c1, c.c2 from table_c c where c.c1 > 1 and c.c2 >= 10) t2
on t1.c1 = t2.c1 and t1.c2 = t2.c2;
explain analyze 
select * 
from (select a.c1, a.c2 from table_a a, table_b b where a.c1 = b.c1 and a.c2 = b.c2) t1
join (select c.c1, c.c2 from table_c c where c.c1 > 1 and c.c2 >= 10) t2
on t1.c1 = t2.c1 and t1.c2 = t2.c2;
explain analyze 
select * 
from (select a.c1, a.c2 from table_a a, table_b b where a.c1 = b.c1 and a.c2 = b.c2) t1
join (select c.c1, c.c2 from table_c c where c.c1 > 1 and c.c2 >= 10) t2
on t1.c1 = t2.c1 and t1.c2 = t2.c2;
\o
\! sql/maskout.sh results/auto-tuning.tmpout
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=xxx rows=1 width=xxx) (actual time=xxx rows=9991 loops=1)
   ->  Hash Join  (cost=xxx rows=1 width=xxx) (actual time=xxx rows=10000 loops=1)
         Hash Cond: ((a.c1 = b.c1) AND (a.c2 = b.c2))
         ->  Seq Scan on table_a a  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
         ->  Hash  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
               ->  Seq Scan on table_b b  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
   ->  Index Scan using ind_c_c2 on table_c c  (cost=xxx rows=1 width=xxx) (actual time=xxx rows=1 loops=10000)
         Index Cond: ((c2 = a.c2) AND (c2 >= 10))
         Filter: ((c1 > 1) AND (c1 = a.c1))
(12 rows)

                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=xxx rows=9991 width=xxx) (actual time=xxx rows=9991 loops=1)
   ->  Hash Join  (cost=xxx rows=1 width=xxx) (actual time=xxx rows=9991 loops=1)
         Hash Cond: ((c.c1 = a.c1) AND (c.c2 = a.c2))
         ->  Seq Scan on table_c c  (cost=xxx rows=9990 width=xxx) (actual time=xxx rows=9991 loops=1)
               Filter: ((c1 > 1) AND (c2 >= 10))
               Rows Removed by Filter: 9
         ->  Hash  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
               ->  Seq Scan on table_a a  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
   ->  Index Scan using ind_b_c2 on table_b b  (cost=xxx rows=1 width=xxx) (actual time=xxx rows=1 loops=9991)
         Index Cond: (c2 = a.c2)
         Filter: (c1 = a.c1)
(14 rows)

                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=xxx rows=9991 width=xxx) (actual time=xxx rows=9991 loops=1)
   ->  Hash Join  (cost=xxx rows=1 width=xxx) (actual time=xxx rows=9991 loops=1)
         Hash Cond: ((c.c1 = b.c1) AND (c.c2 = b.c2))
         ->  Seq Scan on table_c c  (cost=xxx rows=9990 width=xxx) (actual time=xxx rows=9991 loops=1)
               Filter: ((c1 > 1) AND (c2 >= 10))
               Rows Removed by Filter: 9
         ->  Hash  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
               ->  Seq Scan on table_b b  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
   ->  Index Scan using ind_a_c2 on table_a a  (cost=xxx rows=1 width=xxx) (actual time=xxx rows=1 loops=9991)
         Index Cond: (c2 = b.c2)
         Filter: (b.c1 = c1)
(14 rows)

                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=xxx rows=9991 width=xxx) (actual time=xxx rows=9991 loops=1)
   Hash Cond: ((a.c1 = b.c1) AND (a.c2 = b.c2))
   ->  Hash Join  (cost=xxx rows=9991 width=xxx) (actual time=xxx rows=9991 loops=1)
         Hash Cond: ((c.c1 = a.c1) AND (c.c2 = a.c2))
         ->  Seq Scan on table_c c  (cost=xxx rows=9990 width=xxx) (actual time=xxx rows=9991 loops=1)
               Filter: ((c1 > 1) AND (c2 >= 10))
               Rows Removed by Filter: 9
         ->  Hash  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
               ->  Seq Scan on table_a a  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
   ->  Hash  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
         ->  Seq Scan on table_b b  (cost=xxx rows=10000 width=xxx) (actual time=xxx rows=10000 loops=1)
(15 rows)

-- Check the result of auto-tuning
select rows_hint, diff_of_joins, lead_hint, join_hint, scan_hint, join_cnt from plan_repo.plan_history order by id desc limit 4;
     rows_hint      | diff_of_joins |       lead_hint       |    join_hint     |              scan_hint              | join_cnt 
--------------------+---------------+-----------------------+------------------+-------------------------------------+----------
                    |             0 | LEADING( ((c a )b ) ) | HASHJOIN(a b c) +| SEQSCAN(c) SEQSCAN(a) SEQSCAN(b)    |        2
                    |               |                       | HASHJOIN(a c)    |                                     | 
 ROWS(b c #9991)    |          9990 | LEADING( ((c b )a ) ) | NESTLOOP(a b c) +| SEQSCAN(c) SEQSCAN(b) INDEXSCAN(a)  |        2
                    |               |                       | HASHJOIN(b c)    |                                     | 
 ROWS(a c #9991)    |          9990 | LEADING( ((c a )b ) ) | NESTLOOP(a b c) +| SEQSCAN(c) SEQSCAN(a) INDEXSCAN(b)  |        2
                    |               |                       | HASHJOIN(a c)    |                                     | 
 ROWS(a b c #9991) +|         19989 | LEADING( ((a b )c ) ) | NESTLOOP(a b c) +| SEQSCAN(a) SEQSCAN(b) INDEXSCAN(c)  |        2
 ROWS(a b #10000)   |               |                       | HASHJOIN(a b)    |                                     | 
(4 rows)

select norm_query_string, hints from hint_plan.hints;
                                    norm_query_string                                    |                        hints                         
-----------------------------------------------------------------------------------------+------------------------------------------------------
 explain analyze                                                                        +|  ROWS(a b c #9991)                                  +
 select *                                                                               +| ROWS(a b #10000)  ROWS(a c #9991)  ROWS(b c #9991)  
 from (select a.c1, a.c2 from table_a a, table_b b where a.c1 = b.c1 and a.c2 = b.c2) t1+| 
 join (select c.c1, c.c2 from table_c c where c.c1 > ? and c.c2 >= ?) t2                +| 
 on t1.c1 = t2.c1 and t1.c2 = t2.c2;                                                     | 
(1 row)

-- Clean-up
\! rm -f results/auto-tuning.tmpout
